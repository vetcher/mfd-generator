// Code generated by zenrpc; DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"

	"github.com/semrush/zenrpc/v2"
	"github.com/semrush/zenrpc/v2/smd"
)

var RPC = struct {
	MockService struct{ Ping, Project string }
	XMLService  struct{ Tables, LoadProject, CreateProject, SaveProject, GenerateEntity, LoadEntity, SaveEntity string }
}{
	MockService: struct{ Ping, Project string }{
		Ping:    "ping",
		Project: "project",
	},
	XMLService: struct{ Tables, LoadProject, CreateProject, SaveProject, GenerateEntity, LoadEntity, SaveEntity string }{
		Tables:         "tables",
		LoadProject:    "loadproject",
		CreateProject:  "createproject",
		SaveProject:    "saveproject",
		GenerateEntity: "generateentity",
		LoadEntity:     "loadentity",
		SaveEntity:     "saveentity",
	},
}

func (MockService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Description: ``,
		Methods: map[string]smd.Service{
			"Ping": {
				Description: ``,
				Parameters:  []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.String,
				},
			},
			"Project": {
				Description: ``,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filepath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: `Project`,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"name": {
							Description: ``,
							Type:        smd.String,
						},
						"languages": {
							Description: ``,
							Type:        smd.Array,
							Items: map[string]string{
								"type": smd.String,
							},
						},
						"goPgVer": {
							Description: ``,
							Type:        smd.Integer,
						},
						"customTypes": {
							Description: ``,
							Type:        smd.Array,
							Items: map[string]string{
								"$ref": "#/definitions/CustomType",
							},
						},
						"namespaces": {
							Description: ``,
							Type:        smd.Array,
							Items: map[string]string{
								"$ref": "#/definitions/Namespace",
							},
						},
					},
					Definitions: map[string]smd.Definition{
						"CustomType": {
							Type: "object",
							Properties: map[string]smd.Property{
								"dbType": {
									Description: ``,
									Type:        smd.String,
								},
								"goImport": {
									Description: ``,
									Type:        smd.String,
								},
								"goType": {
									Description: ``,
									Type:        smd.String,
								},
							},
						},
						"Namespace": {
							Type: "object",
							Properties: map[string]smd.Property{
								"name": {
									Description: ``,
									Type:        smd.String,
								},
								"entities": {
									Description: ``,
									Type:        smd.Array,
									Items: map[string]string{
										"$ref": "#/definitions/Entity",
									},
								},
							},
						},
						"Entity": {
							Type: "object",
							Properties: map[string]smd.Property{
								"name": {
									Description: ``,
									Type:        smd.String,
								},
								"namespace": {
									Description: `wtf is it here??`,
									Type:        smd.String,
								},
								"table": {
									Description: ``,
									Type:        smd.String,
								},
								"attributes": {
									Description: ``,
									Type:        smd.Array,
									Items: map[string]string{
										"$ref": "#/definitions/Attribute",
									},
								},
								"searches": {
									Description: ``,
									Type:        smd.Array,
									Items: map[string]string{
										"$ref": "#/definitions/Search",
									},
								},
							},
						},
						"Attribute": {
							Type: "object",
							Properties: map[string]smd.Property{
								"name": {
									Description: `names`,
									Type:        smd.String,
								},
								"dbName": {
									Description: ``,
									Type:        smd.String,
								},
								"isArray": {
									Description: `types`,
									Type:        smd.Boolean,
								},
								"dbType": {
									Description: ``,
									Type:        smd.String,
								},
								"goType": {
									Description: ``,
									Type:        smd.String,
								},
								"primaryKey": {
									Description: `Keys`,
									Type:        smd.Boolean,
								},
								"foreignKey": {
									Description: ``,
									Type:        smd.String,
								},
								"nullable": {
									Description: `data params`,
									Type:        smd.Boolean,
								},
								"addable": {
									Description: ``,
									Type:        smd.Boolean,
								},
								"updatable": {
									Description: ``,
									Type:        smd.Boolean,
								},
								"min": {
									Description: ``,
									Type:        smd.Integer,
								},
								"max": {
									Description: ``,
									Type:        smd.Integer,
								},
								"defaultValue": {
									Description: ``,
									Type:        smd.String,
								},
							},
						},
						"Search": {
							Type: "object",
							Properties: map[string]smd.Property{
								"name": {
									Description: ``,
									Type:        smd.String,
								},
								"attrName": {
									Description: ``,
									Type:        smd.String,
								},
								"searchType": {
									Description: ``,
									Type:        smd.String,
								},
							},
						},
					},
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s MockService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.MockService.Ping:
		resp.Set(s.Ping(ctx))

	case RPC.MockService.Project:
		var args = struct {
			Filepath string `json:"filepath"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filepath"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Project(ctx, args.Filepath))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}

func (XMLService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Description: ``,
		Methods: map[string]smd.Service{
			"Tables": {
				Description: `Gets all tables from database
zenrps:return	list of tables`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "url",
						Optional:    false,
						Description: `the connection string to pg database`,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Array,
					Items: map[string]string{
						"type": smd.String,
					},
				},
			},
			"LoadProject": {
				Description: `Loads project from file
zenrps:return		xml contents of mfd file`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: `the path to mfd file`,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"filename": {
							Description: ``,
							Type:        smd.String,
						},
						"xml": {
							Description: ``,
							Type:        smd.String,
						},
					},
				},
			},
			"CreateProject": {
				Description: `Creates project at filepath location
zenrps:return		xml contents of mfd file`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: `the path to mfd file`,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"filename": {
							Description: ``,
							Type:        smd.String,
						},
						"xml": {
							Description: ``,
							Type:        smd.String,
						},
					},
				},
			},
			"SaveProject": {
				Description: `Saves project at filepath location
zenrps:return		saved xml contents of mfd file`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: `the path to mfd file`,
						Type:        smd.String,
					},
					{
						Name:        "contents",
						Optional:    false,
						Description: `the xml contents`,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"filename": {
							Description: ``,
							Type:        smd.String,
						},
						"xml": {
							Description: ``,
							Type:        smd.String,
						},
					},
				},
			},
			"GenerateEntity": {
				Description: `Gets xml for selected table
zenrps:return		xml contents of mfd file`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: `the path to mfd file`,
						Type:        smd.String,
					},
					{
						Name:        "url",
						Optional:    false,
						Description: `the connection string to postgresql database`,
						Type:        smd.String,
					},
					{
						Name:        "table",
						Optional:    false,
						Description: `selected table name`,
						Type:        smd.String,
					},
					{
						Name:        "namespace",
						Optional:    false,
						Description: `namespace of the created entity`,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"filename": {
							Description: ``,
							Type:        smd.String,
						},
						"xml": {
							Description: ``,
							Type:        smd.String,
						},
					},
				},
			},
			"LoadEntity": {
				Description: `Gets xml for selected entity in project file
zenrps:return		xml contents of mfd file`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: `the path to mfd file`,
						Type:        smd.String,
					},
					{
						Name:        "namespace",
						Optional:    false,
						Description: `namespace of the entity`,
						Type:        smd.String,
					},
					{
						Name:        "entity",
						Optional:    false,
						Description: `then name of the entity`,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"filename": {
							Description: ``,
							Type:        smd.String,
						},
						"xml": {
							Description: ``,
							Type:        smd.String,
						},
					},
				},
			},
			"SaveEntity": {
				Description: `Gets xml for selected entity in project file
zenrps:return		saved xml contents of the entity`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: `the path to mfd file`,
						Type:        smd.String,
					},
					{
						Name:        "contents",
						Optional:    false,
						Description: `xml contents of the entity`,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"filename": {
							Description: ``,
							Type:        smd.String,
						},
						"xml": {
							Description: ``,
							Type:        smd.String,
						},
					},
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s XMLService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.XMLService.Tables:
		var args = struct {
			Url string `json:"url"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"url"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Tables(args.Url))

	case RPC.XMLService.LoadProject:
		var args = struct {
			FilePath string `json:"filePath"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.LoadProject(args.FilePath))

	case RPC.XMLService.CreateProject:
		var args = struct {
			FilePath string `json:"filePath"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.CreateProject(args.FilePath))

	case RPC.XMLService.SaveProject:
		var args = struct {
			FilePath string `json:"filePath"`
			Contents string `json:"contents"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath", "contents"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.SaveProject(args.FilePath, args.Contents))

	case RPC.XMLService.GenerateEntity:
		var args = struct {
			FilePath  string `json:"filePath"`
			Url       string `json:"url"`
			Table     string `json:"table"`
			Namespace string `json:"namespace"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath", "url", "table", "namespace"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.GenerateEntity(args.FilePath, args.Url, args.Table, args.Namespace))

	case RPC.XMLService.LoadEntity:
		var args = struct {
			FilePath  string `json:"filePath"`
			Namespace string `json:"namespace"`
			Entity    string `json:"entity"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath", "namespace", "entity"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.LoadEntity(args.FilePath, args.Namespace, args.Entity))

	case RPC.XMLService.SaveEntity:
		var args = struct {
			FilePath string `json:"filePath"`
			Contents string `json:"contents"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath", "contents"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.SaveEntity(args.FilePath, args.Contents))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
