// Code generated by zenrpc; DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"

	"github.com/semrush/zenrpc/v2"
	"github.com/semrush/zenrpc/v2/smd"
)

var RPC = struct {
	XMLService struct{ Tables, LoadProject, CreateProject, SaveProject, GenerateEntity, LoadEntity, SaveEntity string }
}{
	XMLService: struct{ Tables, LoadProject, CreateProject, SaveProject, GenerateEntity, LoadEntity, SaveEntity string }{
		Tables:         "tables",
		LoadProject:    "loadproject",
		CreateProject:  "createproject",
		SaveProject:    "saveproject",
		GenerateEntity: "generateentity",
		LoadEntity:     "loadentity",
		SaveEntity:     "saveentity",
	},
}

func (XMLService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Description: ``,
		Methods: map[string]smd.Service{
			"Tables": {
				Description: `Gets all tables from database
zenrps:return	list of tables`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "url",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Array,
					Items: map[string]string{
						"type": smd.String,
					},
				},
			},
			"LoadProject": {
				Description: `Loads project from file
zenrps:return		xml contents of mfd file`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"filename": {
							Description: ``,
							Type:        smd.String,
						},
						"xml": {
							Description: ``,
							Type:        smd.String,
						},
					},
				},
			},
			"CreateProject": {
				Description: `Creates project at filepath location
zenrps:return		xml contents of mfd file`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"filename": {
							Description: ``,
							Type:        smd.String,
						},
						"xml": {
							Description: ``,
							Type:        smd.String,
						},
					},
				},
			},
			"SaveProject": {
				Description: `Saves project at filepath location
zenrps:return		xml contents of mfd file`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "contents",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"filename": {
							Description: ``,
							Type:        smd.String,
						},
						"xml": {
							Description: ``,
							Type:        smd.String,
						},
					},
				},
			},
			"GenerateEntity": {
				Description: `Gets xml for selected table
zenrps:return		xml contents of mfd file`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "url",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "table",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "namespace",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"filename": {
							Description: ``,
							Type:        smd.String,
						},
						"xml": {
							Description: ``,
							Type:        smd.String,
						},
					},
				},
			},
			"LoadEntity": {
				Description: `Gets xml for selected entity in project file
zenrps:return		xml contents of mfd file`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "namespace",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "entity",
						Optional:    false,
						Description: `then name of the entity`,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"filename": {
							Description: ``,
							Type:        smd.String,
						},
						"xml": {
							Description: ``,
							Type:        smd.String,
						},
					},
				},
			},
			"SaveEntity": {
				Description: `Gets xml for selected entity in project file
zenrps:return		xml contents of mfd file`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "filePath",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "contents",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    true,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"filename": {
							Description: ``,
							Type:        smd.String,
						},
						"xml": {
							Description: ``,
							Type:        smd.String,
						},
					},
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s XMLService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.XMLService.Tables:
		var args = struct {
			Url string `json:"url"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"url"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Tables(args.Url))

	case RPC.XMLService.LoadProject:
		var args = struct {
			FilePath string `json:"filePath"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.LoadProject(args.FilePath))

	case RPC.XMLService.CreateProject:
		var args = struct {
			FilePath string `json:"filePath"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.CreateProject(args.FilePath))

	case RPC.XMLService.SaveProject:
		var args = struct {
			FilePath string `json:"filePath"`
			Contents string `json:"contents"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath", "contents"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.SaveProject(args.FilePath, args.Contents))

	case RPC.XMLService.GenerateEntity:
		var args = struct {
			FilePath  string `json:"filePath"`
			Url       string `json:"url"`
			Table     string `json:"table"`
			Namespace string `json:"namespace"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath", "url", "table", "namespace"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.GenerateEntity(args.FilePath, args.Url, args.Table, args.Namespace))

	case RPC.XMLService.LoadEntity:
		var args = struct {
			FilePath  string `json:"filePath"`
			Namespace string `json:"namespace"`
			Entity    string `json:"entity"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath", "namespace", "entity"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.LoadEntity(args.FilePath, args.Namespace, args.Entity))

	case RPC.XMLService.SaveEntity:
		var args = struct {
			FilePath string `json:"filePath"`
			Contents string `json:"contents"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"filePath", "contents"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.SaveEntity(args.FilePath, args.Contents))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
